<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

      <bean id="applicationContextHelper" class="util.ApplicationContextHelper"/>
	<!-- 1. 数据源 : DriverManagerDataSource -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl" />
		<property name="username" value="admin" />
		<property name="password" value="cmm123" />
	</bean>
	
	<!--
		2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源

		MyBatis定义数据源,同意加载配置
	-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:config/mybatis-config.xml" /> 
	</bean>

	<!--
		3. mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory

		basePackage:指定sql映射文件/接口所在的包（自动扫描）
	-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.bbs.user.mapping"></property>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>

	<!--
		4. 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源
	-->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 5. 使用声明式事务
		 transaction-manager：引用上面定义的事务管理器
	 -->
	<tx:annotation-driven transaction-manager="txManager" />
<!-- 定义事务管理器 --> 
<bean id="transactionManager"
     class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
 <property name="dataSource" ref="dataSource" /> 
 </bean>
<!--下面使用aop切面的方式来实现-->
<tx:advice id="TestAdvice" transaction-manager="transactionManager">   
<!--配置事务传播性，隔离级别以及超时回滚等问题 --> 
   <tx:attributes> 
     <tx:method name="save*" propagation="REQUIRED" /> 
     <tx:method name="del*" propagation="REQUIRED" /> 
     <tx:method name="update*" propagation="REQUIRED" /> 
     <tx:method name="add*" propagation="REQUIRED" />
     <tx:method name="get*" propagation="REQUIRED" />
     <tx:method name="ins*" propagation="REQUIRED" />  
     <tx:method name="*" rollback-for="Exception" /> 
   </tx:attributes> 
 </tx:advice> 
 <aop:config> 
    <!--配置事务切点 --> 
    <aop:pointcut id="services" 
         expression="execution(* com.bbs.user..* .* (..))" /> 
    <aop:advisor pointcut-ref="services" advice-ref="TestAdvice" /> 
 </aop:config> 
</beans>
